# # # # # # # # # # # # # # # # # menu  action # # # # # # # # # # # # # # # # #

=item programsMenu($ )

Generate the EMBOSS main menu, sorted by group and alphabetically.  The 
list of programs is generated by running the EMBOSS program wossname and
passing the resulting output through a filter to remove any programs you don't
want listed.  The filter comes from a file called "exclude" in the Perl library
directory.  See L<"FILES"> for more information.

=cut



package wEMBOSS::menuAction;


use strict;


sub programsMenu {
	my ($doc, $group, $name, $precedingGroup, $subGroup, $subMenuNumber);
	print <<EOF;    
<html> 
	    
<head>
<title>wE menu</title>
<link rel="stylesheet" type="text/css" href="/wEMBOSS/wEMBOSS.css">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<!--
<script language="JavaScript" src="/wEMBOSS/wEMBOSS.js"> </script>
-->
</head>
<body onLoad="parent.loadMenu()" bgcolor="#FFFFF">

EOF

	# read a list of programs and groups to be excluded from the menu into a
	# hash so we can easily test for membership... the exclude file contains
	# the entire output line from wossname for each application/group we want
	# excluded -- this actually speeds up the pattern match...
	#
	my %exclude;
	open EXCLUDE, "$main::wEMBOSS_HOME/embossData/exclude" or warn "couldn't read $main::wEMBOSS_HOME/embossData/exclude: $!";

	my @excluded = <EXCLUDE>;

	close EXCLUDE;
	foreach (@excluded) {

		chomp;

		s/\s+.*//g;

		$exclude{$_}++;

	}
	# run wossname to get a list of available EMBOSS applications...
	#
	open WOSSLIST, "wossname -alphabetic -auto |" or warn "couldn't run wossname: $!";
	my @alphaProgramList = <WOSSLIST>;
	open WOSSGROUP, "wossname -colon -auto |" or warn "couldn't run wossname: $!";
	my @groupProgramList = <WOSSGROUP>;
	close WOSSLIST; close  WOSSGROUP;
	my $precedingSubGroup = 0;
	$subMenuNumber = "subaa";
	foreach ( @groupProgramList, @alphaProgramList ) { # read each line
		chomp;
		next unless /\w/;
		if (m/\p{IsLl}/) { # any lowercase letters --> application name
			   ($name, $doc) = split( /\s+/, $_, 2 ); # get name & desc
			    next if $exclude{$name};
			   $doc =~ s/'//g;
			print <<EOF;
			<a href = '#' class = 'menu' onClick='return parent.defPWD("$name")' title="$doc">$name</a><br>
EOF
		} else { # found a group or group:subgroup
			   next if $exclude{$_};
			   if ( $_ =~ /\:/ ) { # found a subgroup
				print "	    </span>\n" if $precedingSubGroup; # at least second  subgroup 
				      $precedingGroup = $group;
				      ( $group, $subGroup ) = split( ":", $_, 2 ); # split into group and subgroup
				      if ($group ne $precedingGroup) {
					print "	  </span>\n" if $subMenuNumber gt "subaa";
					print <<EOF;
	<img src="/wEMBOSS/images/arrow_green.gif" width="10" height="10"><a href="#" class="group" onclick="groupShowed=parent.switchView('$subMenuNumber', groupShowed, subGroupShowed )" >$group</a><br> <span class="sub" id="$subMenuNumber">
EOF
				              $subMenuNumber++;
				      }
				print <<EOF;
	<img src="/wEMBOSS/images/arrow_red.gif" width="16" height="10"><a href="#" class="subGroup" 
		onClick="subGroupShowed=parent.switchView('$subMenuNumber', '', subGroupShowed)">$subGroup</a><br>
EOF
				$precedingSubGroup = 1;
				print "	    <span class=\"sub\" id=\"$subMenuNumber\">\n";
			   } else { # found a group
			   	if ($precedingSubGroup) {
					print "	    </span>\n";
				      }
				print "	  </span>\n" if $subMenuNumber gt "subaa";
				      $group = $_; # keep group name
				print <<EOF;
	<img src="/wEMBOSS/images/arrow_green.gif" width="10" height="10"><a href="#" class="group" 
		onClick="groupShowed=parent.switchView('$subMenuNumber', groupShowed, subGroupShowed)">$group</a><br>
EOF
				$precedingSubGroup = 0;
				print "	  <span class=\"sub\" id=\"$subMenuNumber\">\n";
			}
			   $subMenuNumber++;
		}
	}
	print <<EOF;
	 </span>
</body>
</html>
EOF
}
1
